#!/usr/bin/env bash

# Script to get GitHub activity for a user over a period of time
# Usage: ./summarize-github-activity [username] [start_date] [end_date]
# Example: ./summarize-github-activity tomzx 2025-10-20 2025-10-25 (date range)
# Example: ./summarize-github-activity tomzx 2025-10-20 (from Oct 20 to today)
# Example: ./summarize-github-activity (defaults to tomzx, today only)

# Default values
USER="${1:-tomzx}"
START_DATE="${2:-$(date +%Y-%m-%d)}"
# If end_date is provided, use it; otherwise use today's date
if [ -n "$3" ]; then
    END_DATE="$3"
elif [ -n "$2" ]; then
    # If start_date was provided but end_date wasn't, use today
    END_DATE="$(date +%Y-%m-%d)"
else
    # If neither was provided, use today for both (today only)
    END_DATE="$START_DATE"
fi

echo "Fetching GitHub activity for user: $USER"
echo "Date range: $START_DATE to $END_DATE"
echo "================================================"
echo ""

# Calculate next day after end date for inclusive range
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    NEXT_DATE=$(date -j -v+1d -f "%Y-%m-%d" "$END_DATE" +%Y-%m-%d)
else
    # Linux/Windows (Git Bash)
    NEXT_DATE=$(date -d "$END_DATE + 1 day" +%Y-%m-%d)
fi

# Run all searches in parallel
echo "Fetching data..."
echo ""

# Search for commits (background)
gh search commits --author="$USER" --author-date="$START_DATE..$NEXT_DATE" --limit 100 --json repository,commit,author,committer --jq '
  group_by(.repository.owner.login + "/" + .repository.name) |
  .[] |
  "  [\(.[0].repository.owner.login)/\(.[0].repository.name)]" + "\n" +
  (map("    - \(.commit.author.date | sub("T"; " ") | sub("Z"; "")) \(.commit.message | split("\n")[0])") | join("\n"))
' > /tmp/gh_commits_$$.txt 2>/dev/null &
PID_COMMITS=$!

# Search for pull requests created (background)
gh search prs --author="$USER" --created="$START_DATE..$NEXT_DATE" --limit 100 --json repository,title,number,url,state --jq '.[] | "  - [\(.repository.nameWithOwner)#\(.number)] \(.title) (\(.state)) - \(.url)"' > /tmp/gh_prs_$$.txt 2>/dev/null &
PID_PRS=$!

# Search for pull requests reviewed (background)
gh search prs --reviewed-by="$USER" --updated="$START_DATE..$NEXT_DATE" --limit 100 --json repository,title,number,url,state --jq '.[] | "  - [\(.repository.nameWithOwner)#\(.number)] \(.title) (\(.state)) - \(.url)"' > /tmp/gh_pr_reviews_$$.txt 2>/dev/null &
PID_PR_REVIEWS=$!

# Search for issues created (background)
gh search issues --author="$USER" --created="$START_DATE..$NEXT_DATE" --limit 100 --json repository,title,number,url,state --jq '.[] | "  - [\(.repository.nameWithOwner)#\(.number)] \(.title) (\(.state)) - \(.url)"' > /tmp/gh_issues_$$.txt 2>/dev/null &
PID_ISSUES=$!

# Search for issues commented on (background)
gh search issues --commenter="$USER" --updated="$START_DATE..$NEXT_DATE" --limit 100 --json repository,title,number,url,state --jq '.[] | "  - [\(.repository.nameWithOwner)#\(.number)] \(.title) (\(.state)) - \(.url)"' > /tmp/gh_comments_$$.txt 2>/dev/null &
PID_COMMENTS=$!

# Wait for all background jobs to complete
wait $PID_COMMITS
wait $PID_PRS
wait $PID_PR_REVIEWS
wait $PID_ISSUES
wait $PID_COMMENTS

# Display results
echo "üìù Commits:"
COMMITS=$(cat /tmp/gh_commits_$$.txt)
if [ -z "$COMMITS" ]; then
  echo "  None"
else
  echo "$COMMITS"
fi
echo ""

echo "üîÄ Pull Requests Created:"
PRS=$(cat /tmp/gh_prs_$$.txt)
if [ -z "$PRS" ]; then
  echo "  None"
else
  echo "$PRS"
fi
echo ""

echo "üëÄ Pull Requests Reviewed:"
PR_REVIEWS=$(cat /tmp/gh_pr_reviews_$$.txt)
if [ -z "$PR_REVIEWS" ]; then
  echo "  None"
else
  echo "$PR_REVIEWS"
fi
echo ""

echo "üêõ Issues Created:"
ISSUES=$(cat /tmp/gh_issues_$$.txt)
if [ -z "$ISSUES" ]; then
  echo "  None"
else
  echo "$ISSUES"
fi
echo ""

echo "üí¨ Issues Commented On:"
COMMENTS=$(cat /tmp/gh_comments_$$.txt)
if [ -z "$COMMENTS" ]; then
  echo "  None"
else
  echo "$COMMENTS"
fi
echo ""

# Clean up temporary files
rm -f /tmp/gh_commits_$$.txt /tmp/gh_prs_$$.txt /tmp/gh_pr_reviews_$$.txt /tmp/gh_issues_$$.txt /tmp/gh_comments_$$.txt
echo "================================================"
echo "Activity summary complete!"
